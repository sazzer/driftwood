version: 2
jobs: 
  build_go:
    docker:
      - image: circleci/golang:1.12
    environment:
      GO111MODULE: "on"
    working_directory: ~/repo
    steps: 
      - checkout

      - restore_cache: 
          keys: 
            - "go-dependencies-{{ checksum \"driftwood-go/go.sum\" }}"
            - go-dependencies-

      - setup_remote_docker

      - run:
          name: "Get Dependencies"
          working_directory: ~/repo/driftwood-go
          command: |
              go get
              go install github.com/golang/mock/mockgen
              go get github.com/mgechev/revive
              go get -u github.com/gobuffalo/packr/packr
              go get github.com/onsi/ginkgo/ginkgo
              go generate ./...
              packr

      - run:
           name: "Lint"
           working_directory: ~/repo/driftwood-go
           command: |
              go fmt ./...
              go vet ./...
              revive -config revive.toml -formatter stylish ./...

      - run:
           name: "Test"
           working_directory: ~/repo/driftwood-go
           command: go test github.com/sazzer/driftwood/internal/...

      - run:
           name: "Integration Test"
           working_directory: ~/repo/driftwood-go
           command: ginkgo -tags docker integration/...

      - run:
           name: "Build Docker image"
           working_directory: ~/repo/driftwood-go
           command: |
              go mod vendor
              docker build -t uk.co.grahamcox.driftwood.service/driftwood-service:latest .
              rm -rf vendor

      - run: 
          name: "Export Docker image"
          command: |
              mkdir -p /tmp/docker_images
              docker save -o /tmp/docker_images/driftwood-go.tar uk.co.grahamcox.driftwood.service/driftwood-service:latest

      - save_cache: 
          key: "go-dependencies-{{ checksum \"driftwood-go/go.sum\" }}"
          paths: 
            - "/go/pkg"

  build_service: 
    docker: 
      - image: "circleci/openjdk:11-jdk"
    environment: 
      MAVEN_OPTS: "-Xmx3200m"
    working_directory: ~/repo
    steps: 
      - checkout

      - restore_cache: 
          keys: 
            - "maven-dependencies-{{ checksum \"driftwood-service/pom.xml\" }}"
            - maven-dependencies-

      - setup_remote_docker

      - run: 
          name: "Build and test project"
          working_directory: ~/repo/driftwood-service
          command: "mvn clean install -B -Pdocker"

      - store_test_results: 
          path: ~/repo/driftwood-service/target/surefire-reports

      - run: 
          name: "Build Site"
          working_directory: ~/repo/driftwood-service
          command: "mvn site:site -DskipTests"

      - store_artifacts: 
          name: "Save Site"
          path: ~/repo/driftwood-service/target/site
          destination: driftwood-service-site

      - run: 
          name: "Export Docker image"
          command: |
              mkdir -p /tmp/docker_images
              docker save -o /tmp/docker_images/driftwood-service.tar uk.co.grahamcox.driftwood.service/driftwood-service:latest

      - persist_to_workspace: 
          root: /tmp/docker_images
          paths: 
            - driftwood-service.tar

      - save_cache: 
          key: "maven-dependencies-{{ checksum \"driftwood-service/pom.xml\" }}"
          paths: 
            - ~/.m2

  build_ui: 
    docker: 
      - image: "circleci/node:11.4.0"
    working_directory: ~/repo
    steps: 
      - checkout

      - restore_cache: 
          keys: 
            - "package-{{ checksum \"driftwood-ui/package.json\" }}"
            - package-

      - setup_remote_docker

      - run: 
          name: "Download dependencies"
          working_directory: ~/repo/driftwood-ui
          command: "yarn install"

      - run: 
          name: "Build and test project"
          working_directory: ~/repo/driftwood-ui
          command: |
              yarn lint
              yarn test
              yarn build

      - persist_to_workspace: 
          root: ~/repo/driftwood-ui
          paths: 
            - build

      - run: 
          name: "Build and Export Docker image"
          working_directory: ~/repo/driftwood-ui
          command: |
              docker build -t uk.co.grahamcox.driftwood/driftwood-ui:latest .
              mkdir -p /tmp/docker_images
              docker save -o /tmp/docker_images/driftwood-ui.tar uk.co.grahamcox.driftwood/driftwood-ui:latest

      - persist_to_workspace: 
          root: /tmp/docker_images
          paths: 
            - driftwood-ui.tar

      - save_cache: 
          key: "package-{{ checksum \"driftwood-ui/package.json\" }}"
          paths: 
            - ~/repo/driftwood-ui/node_modules

  build_e2e: 
    docker: 
      - image: "circleci/openjdk:11-jdk"
    environment: 
      MAVEN_OPTS: "-Xmx3200m"
    working_directory: ~/repo
    steps: 
      - checkout

      - restore_cache: 
          keys: 
            - "maven-dependencies-e2e-{{ checksum \"driftwood-e2e/pom.xml\" }}"
            - maven-dependencies-e2e-

      - setup_remote_docker

      - run: 
          name: "Build and Export Docker image"
          working_directory: ~/repo/driftwood-e2e
          command: |
              mvn clean install -B -Pdocker
              mkdir -p /tmp/docker_images
              docker save -o /tmp/docker_images/driftwood-e2e.tar uk.co.grahamcox.driftwood.e2e/driftwood-e2e:latest

      - persist_to_workspace: 
          root: /tmp/docker_images
          paths: 
            - driftwood-e2e.tar

      - save_cache: 
          key: "maven-dependencies-e2e-{{ checksum \"driftwood-e2e/pom.xml\" }}"
          paths: 
            - ~/.m2

  run_e2e_tests:
    machine: true
    working_directory: ~/repo
    steps: 
      - checkout

      - attach_workspace: 
          at: /tmp/workspace

      - run: 
          name: "Load Docker Images"
          command: |
              docker load -i /tmp/workspace/driftwood-service.tar
              docker load -i /tmp/workspace/driftwood-ui.tar
              docker load -i /tmp/workspace/driftwood-e2e.tar

      - run:
          name: "Run tests"
          working_directory: ~/repo
          command: docker-compose -f docker-compose.test.yml up --abort-on-container-exit --exit-code-from driftwood-e2e

      - store_artifacts: 
          name: "Save Screenshots"
          path: ~/repo/screenshots
          destination: driftwood-e2e-screenshots

  deploy_service: 
    docker: 
      - image: "circleci/openjdk:11-jdk"
    working_directory: ~/repo
    steps: 
      - setup_remote_docker

      - run: 
          name: "Setup Heroku"
          command: "wget -qO- https://cli-assets.heroku.com/install-ubuntu.sh | sh"

      - attach_workspace: 
          at: /tmp/workspace

      - run: 
          name: "Load Docker Image"
          command: "docker load -i /tmp/workspace/driftwood-service.tar"

      - run: 
          name: "Deploy Service"
          command: |
              docker login --username=$HEROKU_EMAIL --password=$HEROKU_API_KEY registry.heroku.com
              docker tag uk.co.grahamcox.driftwood.service/driftwood-service:latest registry.heroku.com/driftwood-cd/web
              docker push registry.heroku.com/driftwood-cd/web
              heroku container:release --app=driftwood-cd web

  deploy_ui: 
    docker: 
      - image: "circleci/node:11.4.0"
    working_directory: ~/repo
    steps: 
      - checkout

      - attach_workspace: 
          at: /tmp/workspace

      - run:
          name: "Update Site for Deploy"
          command: |
              echo "window.DRIFTWOOD_CONFIG = {API_URI: 'https://driftwood-cd.herokuapp.com/'};" > /tmp/workspace/build/config.js
      - run: 
          name: "Deploy Site"
          command: |
              sudo npm install -g netlify-cli
              netlify deploy --dir=/tmp/workspace/build --prod

workflows: 
  version: 2
  full_build: 
    jobs: 
      - build_go
      - build_service
      - build_ui
      - build_e2e
      - run_e2e_tests:
          requires: 
            - build_service
            - build_ui
            - build_e2e
      - deploy_service: 
          requires: 
            - run_e2e_tests
      - deploy_ui: 
          requires: 
            - run_e2e_tests
